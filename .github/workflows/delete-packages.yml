name: Delete Cinc Packages (rmoriz/cinc-packages)

# This workflow deletes all versions of the cinc-packages container package
# from the rmoriz personal GitHub account. Use with caution!

on:
  workflow_dispatch:

jobs:
  delete-packages:
    runs-on: ubuntu-latest
    permissions:
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Authenticate with GitHub
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Delete all packages
        run: |
          USER="rmoriz"
          PACKAGE_NAME="cinc-packages"
          PACKAGE_TYPE="container"

          echo "Searching for package: $PACKAGE_NAME for user: $USER"

          # Check if package exists with proper error handling
          if ! gh api "/users/$USER/packages?package_type=$PACKAGE_TYPE" --jq ".[] | select(.name == \"$PACKAGE_NAME\")" > /tmp/package_info 2>/dev/null; then
            echo "Failed to list packages or package not found."
            exit 0
          fi

          if [ ! -s /tmp/package_info ]; then
            echo "Package $PACKAGE_NAME not found for user $USER."
            exit 0
          fi

          echo "Found package: $PACKAGE_NAME"

          # List versions with proper error handling
          if ! gh api "/users/$USER/packages/$PACKAGE_TYPE/$PACKAGE_NAME/versions" --jq '.[].id' > /tmp/versions 2>/dev/null; then
            echo "Failed to list versions or package has no versions."
            exit 0
          fi

          if [ ! -s /tmp/versions ]; then
            echo "No versions found for package $PACKAGE_NAME."
            exit 0
          fi

          VERSION_COUNT=$(wc -l < /tmp/versions)
          echo "Found $VERSION_COUNT versions to delete"

          # Delete each version
          while read -r VERSION_ID; do
            if [ -n "$VERSION_ID" ] && [[ "$VERSION_ID" =~ ^[0-9]+$ ]]; then
              echo "Deleting version ID: $VERSION_ID"
              if gh api -X DELETE "/users/$USER/packages/$PACKAGE_TYPE/$PACKAGE_NAME/versions/$VERSION_ID" 2>/dev/null; then
                echo "Successfully deleted version ID: $VERSION_ID"
              else
                echo "Failed to delete version ID: $VERSION_ID (may already be deleted)"
              fi
            else
              echo "Skipping invalid version ID: $VERSION_ID"
            fi
          done < /tmp/versions

          # Clean up temp files
          rm -f /tmp/package_info /tmp/versions

          echo "All versions of $PACKAGE_NAME processed for user $USER account."