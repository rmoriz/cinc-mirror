name: Mirror Cinc Packages to GHCR
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      min_version:
        description: 'Minimum version to mirror (default: 18)'
        required: false
        default: '18'

jobs:
  mirror:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Make scripts executable
      run: |
        chmod +x mirror-cinc.sh
        chmod +x security-incident-response.sh

    - name: Install dependencies
      run: |
        echo "üì¶ Installing required dependencies..."

        # Install ORAS for OCI artifact management
        echo "Installing ORAS..."

        # Try multiple versions in case some don't exist
        ORAS_VERSIONS=("v1.3.0" "v1.1.0" "v1.0.0" "v0.16.0")

        for version in "${ORAS_VERSIONS[@]}"; do
          echo "Trying ORAS version: $version"

          # Try downloading the tar.gz first
          if curl -f -L -o oras.tar.gz "https://github.com/oras-project/oras/releases/download/${version}/oras_${version#v}_linux_amd64.tar.gz" 2>/dev/null; then
            echo "Downloaded tar.gz successfully"
            mkdir -p oras-install/
            tar -zxf oras.tar.gz -C oras-install/ 2>/dev/null || tar -xf oras.tar.gz -C oras-install/
            if [ -f "oras-install/oras" ]; then
              sudo mv oras-install/oras /usr/local/bin/
              rm -rf oras-install/ oras.tar.gz
              ORAS_INSTALLED=true
              break
            fi
          fi

          # Try downloading the binary directly
          if curl -f -L -o oras "https://github.com/oras-project/oras/releases/download/${version}/oras_${version#v}_linux_amd64" 2>/dev/null; then
            echo "Downloaded binary successfully"
            chmod +x oras
            sudo mv oras /usr/local/bin/
            ORAS_INSTALLED=true
            break
          fi

          echo "Version $version failed, trying next..."
        done

        if [ "$ORAS_INSTALLED" != "true" ]; then
          echo "‚ùå Failed to install ORAS from any version"
          echo "Available versions may have changed. Please check:"
          echo "https://github.com/oras-project/oras/releases"
          exit 1
        fi

        # Verify installations
        echo "Verifying installations..."
        if command -v oras >/dev/null 2>&1; then
          oras version
          echo "‚úÖ ORAS installed successfully"
        else
          echo "‚ùå ORAS installation verification failed"
          exit 1
        fi

        echo "‚úÖ All dependencies installed successfully"

    - name: Set mirror configuration
      id: config
      run: |
        # Set default values
        MIN_VERSION="18"

        # Override with input if provided
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ github.event.inputs.min_version }}" ]; then
          MIN_VERSION="${{ github.event.inputs.min_version }}"
        fi

        echo "min_version=$MIN_VERSION" >> $GITHUB_OUTPUT
        echo "Using minimum version: $MIN_VERSION"

    - name: Debug FTP structure
      run: |
        echo "üîç Debugging FTP structure..."
        echo "Testing FTP connection and directory listing..."

        # Test basic FTP connection
        if curl -s -l "ftp://downloads.cinc.sh/pub/cinc/files/stable/cinc/" | head -10; then
          echo "‚úÖ FTP connection successful"
        else
          echo "‚ùå FTP connection failed"
          exit 1
        fi

        # Test version directory
        if curl -s -l "ftp://downloads.cinc.sh/pub/cinc/files/stable/cinc/18.0.169/" | head -5; then
          echo "‚úÖ Version directory accessible"
        else
          echo "‚ùå Version directory access failed"
          exit 1
        fi

        # Test distro directory
        if curl -s -l "ftp://downloads.cinc.sh/pub/cinc/files/stable/cinc/18.0.169/debian/" | head -5; then
          echo "‚úÖ Distro directory accessible"
        else
          echo "‚ùå Distro directory access failed"
          exit 1
        fi

        # Test distro version directory
        if curl -s -l "ftp://downloads.cinc.sh/pub/cinc/files/stable/cinc/18.0.169/debian/10/" | head -5; then
          echo "‚úÖ Distro version directory accessible"
        else
          echo "‚ùå Distro version directory access failed"
          exit 1
        fi

    - name: Run Cinc mirror script
      env:
        GHCR_ORG: ${{ github.repository_owner }}
        GHCR_REPO: cinc-packages
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MIRROR_DIR: ./cinc-mirror
        MIN_VERSION: ${{ steps.config.outputs.min_version }}
        TARGET_DISTROS: debian ubuntu
        FTP_BASE: ftp://downloads.cinc.sh/pub/cinc/files/stable/cinc
      run: |
        echo "üöÄ Starting Cinc mirror process..."
        echo "GHCR_ORG: $GHCR_ORG"
        echo "MIN_VERSION: $MIN_VERSION"
        echo "TARGET_DISTROS: $TARGET_DISTROS"

        # Run the mirror script with error output
        if ./mirror-cinc.sh 2>&1; then
          echo "‚úÖ Mirror process completed successfully"
        else
          echo "‚ùå Mirror process failed"
          exit 1
        fi